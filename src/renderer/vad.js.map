{"version":3,"file":"vad.js","sourceRoot":"","sources":["vad.ts"],"names":[],"mappings":"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","sourcesContent":["export interface VADOptions {\r\n\tfftSize: number;\r\n\tbufferLen: number;\r\n\tsmoothingTimeConstant: number;\r\n\tminCaptureFreq: number;\r\n\tmaxCaptureFreq: number;\r\n\tnoiseCaptureDuration: number;\r\n\tminNoiseLevel: number;\r\n\tmaxNoiseLevel: number;\r\n\tavgNoiseMultiplier: number;\r\n\tonVoiceStart: () => void;\r\n\tonVoiceStop: () => void;\r\n\tonUpdate: (val: number) => void;\r\n\tstereo: boolean;\r\n}\r\n\r\nfunction clamp(value: number, min: number, max: number): number {\r\n\treturn min < max ? (value < min ? min : value > max ? max : value) : value < max ? max : value > min ? min : value;\r\n}\r\n\r\n// https://github.com/Jam3/audio-frequency-to-index\r\nfunction frequencyToIndex(frequency: number, sampleRate: number, frequencyBinCount: number): number {\r\n\tconst nyquist = sampleRate / 2;\r\n\tconst index = Math.round((frequency / nyquist) * frequencyBinCount);\r\n\treturn clamp(index, 0, frequencyBinCount);\r\n}\r\n\r\n// https://github.com/Jam3/analyser-frequency-average\r\nfunction analyserFrequency(analyser: AnalyserNode, frequencies: Uint8Array, minHz: number, maxHz: number): number {\r\n\tconst sampleRate = analyser.context.sampleRate;\r\n\tconst binCount = analyser.frequencyBinCount;\r\n\tlet start = frequencyToIndex(minHz, sampleRate, binCount);\r\n\tconst end = frequencyToIndex(maxHz, sampleRate, binCount);\r\n\tconst count = end - start;\r\n\tlet sum = 0;\r\n\tfor (; start < end; start++) {\r\n\t\tsum += frequencies[start] / 255;\r\n\t}\r\n\treturn count === 0 ? 0 : sum / count;\r\n}\r\n\r\nexport default function (\r\n\taudioContext: AudioContext,\r\n\tsource: AudioNode,\r\n\tdestination: AudioNode | undefined,\r\n\topts: Partial<VADOptions>\r\n): {\r\n\tdestination: AudioNode;\r\n\tconnect: () => void;\r\n\tdestroy: () => void;\r\n\tinit: () => void;\r\n\toptions: VADOptions;\r\n} {\r\n\topts = opts || {};\r\n\r\n\tconst defaults: VADOptions = {\r\n\t\tfftSize: 1024,\r\n\t\tbufferLen: 1024,\r\n\t\tsmoothingTimeConstant: 0.2,\r\n\t\tminCaptureFreq: 85, // in Hz\r\n\t\tmaxCaptureFreq: 255, // in Hz\r\n\t\tnoiseCaptureDuration: 1000, // in ms\r\n\t\tminNoiseLevel: 0.15, // from 0 to 1\r\n\t\tmaxNoiseLevel: 0.7, // from 0 to 1\r\n\t\tavgNoiseMultiplier: 1.2,\r\n\t\tonVoiceStart: function () {\r\n\t\t\t/* DO NOTHING */\r\n\t\t},\r\n\t\tonVoiceStop: function () {\r\n\t\t\t/* DO NOTHING */\r\n\t\t},\r\n\t\tonUpdate: function () {\r\n\t\t\t/* DO NOTHING */\r\n\t\t},\r\n\t\tstereo: true,\r\n\t};\r\n\r\n\tconst options: VADOptions = Object.assign({}, defaults, opts);\r\n\r\n\tlet baseLevel = 0;\r\n\tlet voiceScale = 1;\r\n\tlet activityCounter = 0;\r\n\tconst activityCounterMin = 0;\r\n\tconst activityCounterMax = 30;\r\n\tconst activityCounterThresh = 5;\r\n\r\n\tlet envFreqRange: number[] = [];\r\n\tlet isNoiseCapturing = true;\r\n\tlet prevVadState: boolean | undefined = undefined;\r\n\tlet vadState = false;\r\n\tlet captureTimeout: number | null = null;\r\n\r\n\t// var source = audioContext.createMediaStreamSource(stream);\r\n\tconst analyser = audioContext.createAnalyser();\r\n\tanalyser.smoothingTimeConstant = options.smoothingTimeConstant;\r\n\tanalyser.fftSize = options.fftSize;\r\n\r\n\tconst channels = options.stereo ? 2 : 1;\r\n\tconst scriptProcessorNode = audioContext.createScriptProcessor(options.bufferLen, channels, channels);\r\n\tconnect();\r\n\tscriptProcessorNode.onaudioprocess = monitor;\r\n\r\n\tif (isNoiseCapturing) {\r\n\t\t//console.log('VAD: start noise capturing');\r\n\t\tcaptureTimeout = (setTimeout(init, options.noiseCaptureDuration) as unknown) as number;\r\n\t}\r\n\r\n\tfunction init() {\r\n\t\t//console.log('VAD: stop noise capturing');\r\n\t\tisNoiseCapturing = false;\r\n\r\n\t\tenvFreqRange = envFreqRange\r\n\t\t\t.filter(function (val) {\r\n\t\t\t\treturn val;\r\n\t\t\t})\r\n\t\t\t.sort();\r\n\t\tconst averageEnvFreq = envFreqRange.length\r\n\t\t\t? envFreqRange.reduce(function (p, c) {\r\n\t\t\t\t\treturn Math.min(p, c);\r\n\t\t\t  }, 1)\r\n\t\t\t: options.minNoiseLevel || 0.1;\r\n\r\n\t\tbaseLevel = averageEnvFreq * options.avgNoiseMultiplier;\r\n\t\tif (options.minNoiseLevel && baseLevel < options.minNoiseLevel) baseLevel = options.minNoiseLevel;\r\n\t\tif (options.maxNoiseLevel && baseLevel > options.maxNoiseLevel) baseLevel = options.maxNoiseLevel;\r\n\r\n\t\tvoiceScale = 1 - baseLevel;\r\n\r\n\t\t//\tconsole.log('VAD: base level:', options.minNoiseLevel);\r\n\t}\r\n\r\n\tfunction connect() {\r\n\t\tsource.connect(analyser);\r\n\t\tanalyser.connect(scriptProcessorNode);\r\n\t\tif (destination) scriptProcessorNode.connect(destination);\r\n\t\telse scriptProcessorNode.connect(audioContext.destination);\r\n\t}\r\n\r\n\tfunction disconnect() {\r\n\t\tscriptProcessorNode.disconnect();\r\n\t\tanalyser.disconnect();\r\n\t\tsource.disconnect();\r\n\t\tif (destination) {\r\n\t\t\tdestination.disconnect();\r\n\t\t\tsource.connect(destination);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction destroy() {\r\n\t\tcaptureTimeout && clearTimeout(captureTimeout);\r\n\t\tdisconnect();\r\n\t\tscriptProcessorNode.onaudioprocess = null;\r\n\t}\r\n\r\n\tfunction monitor(event: AudioProcessingEvent) {\r\n\t\tif (destination) {\r\n\t\t\tfor (let channel = 0; channel < event.outputBuffer.numberOfChannels; channel++) {\r\n\t\t\t\tconst inputData = event.inputBuffer.getChannelData(channel);\r\n\t\t\t\tconst outputData = event.outputBuffer.getChannelData(channel);\r\n\t\t\t\tfor (let sample = 0; sample < event.inputBuffer.length; sample++) {\r\n\t\t\t\t\t// make output equal to the same as the input\r\n\t\t\t\t\toutputData[sample] = inputData[sample];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst frequencies = new Uint8Array(analyser.frequencyBinCount);\r\n\t\tanalyser.getByteFrequencyData(frequencies);\r\n\r\n\t\tconst average = analyserFrequency(analyser, frequencies, options.minCaptureFreq, options.maxCaptureFreq);\r\n\t\tif (isNoiseCapturing) {\r\n\t\t\tenvFreqRange.push(average);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (average >= baseLevel && activityCounter < activityCounterMax) {\r\n\t\t\tactivityCounter++;\r\n\t\t} else if (average < baseLevel && activityCounter > activityCounterMin) {\r\n\t\t\tactivityCounter--;\r\n\t\t}\r\n\t\tvadState = activityCounter > activityCounterThresh;\r\n\r\n\t\tif (prevVadState !== vadState) {\r\n\t\t\tvadState ? onVoiceStart() : onVoiceStop();\r\n\t\t\tprevVadState = vadState;\r\n\t\t}\r\n\r\n\t\toptions.onUpdate(Math.max(0, average - baseLevel) / voiceScale);\r\n\t}\r\n\r\n\tfunction onVoiceStart() {\r\n\t\toptions.onVoiceStart();\r\n\t}\r\n\r\n\tfunction onVoiceStop() {\r\n\t\toptions.onVoiceStop();\r\n\t}\r\n\r\n\treturn { destination: analyser, connect, destroy, options, init };\r\n}\r\n"]}