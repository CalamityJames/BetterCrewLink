{"version":3,"file":"cosmetics.js","sourceRoot":"","sources":["cosmetics.ts"],"names":[],"mappings":"AAAA,aAAa;AACb,OAAO,WAAW,MAAM,4CAA4C,CAAC,CAAC,aAAa;AACnF,OAAO,eAAe,MAAM,8CAA8C,CAAC,CAAC,aAAa;AACzF,OAAO,eAAe,MAAM,6CAA6C,CAAC;AAG1E,MAAM,CAAC,MAAM,QAAQ,GAAG,WAAW,CAAC;AAEpC,MAAM,CAAN,IAAY,YAIX;AAJD,WAAY,YAAY;IACvB,+CAAI,CAAA;IACJ,6CAAG,CAAA;IACH,uDAAQ,CAAA;AACT,CAAC,EAJW,YAAY,KAAZ,YAAY,QAIvB;AAUD,IAAI,aAAa,GASb,EAAE,CAAC;AAQP,IAAI,cAAc,GAAG,KAAK,CAAC;AAC3B,MAAM,CAAC,IAAI,eAAe,GAAG,KAAK,CAAC;AAEnC,MAAM,UAAU,cAAc;IAC7B,IAAI,eAAe,IAAI,cAAc,EAAE;QACtC,OAAO;KACP;IACD,cAAc,GAAG,IAAI,CAAC;IACtB,KAAK,CAAC,GAAG,kBAAkB,YAAY,CAAC;SACtC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;SACnC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;QACd,aAAa,GAAG,IAAI,CAAC;QACrB,eAAe,GAAG,IAAI,CAAC;IACxB,CAAC,CAAC,CAAC;IACJ,OAAO,SAAS,CAAC;AAClB,CAAC;AAED,MAAM,kBAAkB,GAAG,uEAAuE,CAAC;AACnG,SAAS,SAAS,CAAC,KAAa,EAAE,EAAE,GAAG,EAAE,EAAE,GAAa,EAAE,IAAI,GAAG,KAAK;IACrE,IAAI,CAAC,eAAe,EAAE;QACrB,OAAO,EAAE,CAAC;KACV;IACD,MAAM,OAAO,GAAG,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;IAChC,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,CAAC,CAAC,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,CAAC;IACxD,MAAM,UAAU,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,CAAC;IACxC,IAAI,GAAG,IAAI,OAAO,EAAE;QACnB,IAAI,CAAC,UAAU;YAAE,OAAO,GAAG,kBAAkB,IAAI,OAAO,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;;YACjE,OAAO,eAAe,kBAAkB,IAAI,OAAO,CAAC,GAAG,IAAI,GAAG,UAAU,KAAK,EAAE,CAAC;KACrF;IACD,OAAO,SAAS,CAAC;AAClB,CAAC;AAID,SAAS,MAAM,CAAC,EAAU,EAAE,OAAiB;;IAC5C,IAAI,CAAC,eAAe,EAAE;QACrB,OAAO,SAAS,CAAC;KACjB;IACD,KAAK,MAAM,GAAG,IAAI,CAAC,MAAkB,EAAE,OAAO,CAAC,EAAE;QAChD,MAAM,UAAU,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;QACtC,MAAM,GAAG,GAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACjC,IAAI,GAAG,EAAE;YACR,GAAG,CAAC,GAAG,GAAG,MAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,GAAG,mCAAI,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,UAAU,CAAC;YAC7C,GAAG,CAAC,KAAK,GAAG,MAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,KAAK,mCAAI,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,YAAY,CAAC;YACnD,GAAG,CAAC,IAAI,GAAG,MAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,IAAI,mCAAI,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,WAAW,CAAC;YAChD,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC;YACd,OAAO,GAAG,CAAC;SACX;KACD;IACD,OAAO,SAAS,CAAC;AAClB,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,EAAU,EAAE,GAAa;;IACzD,MAAM,GAAG,GAAG,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;IAC5B,OAAO;QACN,GAAG,EAAE,MAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,GAAG,mCAAI,GAAG;QACpB,KAAK,EAAE,MAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,KAAK,mCAAI,GAAG;QACxB,IAAI,EAAE,MAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,IAAI,mCAAI,GAAG;KACtB,CAAC;AACH,CAAC;AAED,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,KAAK,CAAC;AACrC,MAAM,UAAU,WAAW,CAC1B,KAAa,EACb,OAAgB,EAChB,IAAkB,EAClB,EAAE,GAAG,EAAE,EACP,MAAgB,MAAM;IAEtB,IAAI,IAAI,KAAK,YAAY,CAAC,IAAI,EAAE;QAC/B,IAAI,KAAK,IAAI,cAAc,EAAE;YAC5B,OAAO,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC;SACnD;QACD,OAAO,uBAAuB,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,IAAI,KAAK,MAAM,CAAC;KAC1E;SAAM;QACN,MAAM,MAAM,GAAG,SAAS,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,KAAK,YAAY,CAAC,QAAQ,CAAC,CAAC;QACzE,IAAI,MAAM;YAAE,OAAO,MAAM,CAAC;KAC1B;IACD,OAAO,EAAE,CAAC;AACX,CAAC","sourcesContent":["// @ts-ignore\r\nimport redAliveimg from '../../static/images/avatar/placeholder.png'; // @ts-ignore\r\nimport rainbowAliveimg from '../../static/images/avatar/rainbow-alive.png'; // @ts-ignore\r\nimport rainbowDeadeimg from '../../static/images/avatar/rainbow-dead.png';\r\n\r\nimport { ModsType } from '../common/Mods';\r\nexport const redAlive = redAliveimg;\r\n\r\nexport enum cosmeticType {\r\n\tbase,\r\n\that,\r\n\that_back,\r\n}\r\ninterface hatData {\r\n\timage: string;\r\n\tback_image: string;\r\n\ttop: string | undefined;\r\n\twidth: string | undefined;\r\n\tleft: string | undefined;\r\n\tmulti_color: boolean | undefined;\r\n\tmod: ModsType | undefined;\r\n}\r\nlet hatCollection: {\r\n\t[mod: string]: {\r\n\t\tdefaultWidth: string;\r\n\t\tdefaultTop: string;\r\n\t\tdefaultLeft: string;\r\n\t\thats: {\r\n\t\t\t[id: string]: hatData;\r\n\t\t};\r\n\t};\r\n} = {};\r\n\r\nexport interface HatDementions {\r\n\ttop: string;\r\n\tleft: string;\r\n\twidth: string;\r\n}\r\n\r\nlet requestingHats = false;\r\nexport var initializedHats = false;\r\n\r\nexport function initializeHats() {\r\n\tif (initializedHats || requestingHats) {\r\n\t\treturn;\r\n\t}\r\n\trequestingHats = true;\r\n\tfetch(`${HAT_COLLECTION_URL}/hats.json`)\r\n\t\t.then((response) => response.json())\r\n\t\t.then((data) => {\r\n\t\t\thatCollection = data;\r\n\t\t\tinitializedHats = true;\r\n\t\t});\r\n\treturn undefined;\r\n}\r\n\r\nconst HAT_COLLECTION_URL = 'https://raw.githubusercontent.com/OhMyGuus/BetterCrewlink-Hats/master';\r\nfunction getModHat(color: number, id = '', mod: ModsType, back = false) {\r\n\tif (!initializedHats) {\r\n\t\treturn '';\r\n\t}\r\n\tconst hatBase = getHat(id, mod);\r\n\tconst hat = back ? hatBase?.back_image : hatBase?.image;\r\n\tconst multiColor = hatBase?.multi_color;\r\n\tif (hat && hatBase) {\r\n\t\tif (!multiColor) return `${HAT_COLLECTION_URL}/${hatBase.mod}/${hat}`;\r\n\t\telse return `generate:///${HAT_COLLECTION_URL}/${hatBase.mod}/${hat}?color=${color}`;\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\n\r\n\r\nfunction getHat(id: string, modType: ModsType): hatData | undefined {\r\n\tif (!initializedHats) {\r\n\t\treturn undefined;\r\n\t}\r\n\tfor (const mod of ['NONE' as ModsType, modType]) {\r\n\t\tconst modHatList = hatCollection[mod];\r\n\t\tconst hat = modHatList?.hats[id];\r\n\t\tif (hat) {\r\n\t\t\that.top = hat?.top ?? modHatList?.defaultTop;\r\n\t\t\that.width = hat?.width ?? modHatList?.defaultWidth;\r\n\t\t\that.left = hat?.left ?? modHatList?.defaultLeft;\r\n\t\t\that.mod = mod;\r\n\t\t\treturn hat;\r\n\t\t}\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\nexport function getHatDementions(id: string, mod: ModsType): HatDementions {\r\n\tconst hat = getHat(id, mod);\r\n\treturn {\r\n\t\ttop: hat?.top ?? '0',\r\n\t\twidth: hat?.width ?? '0',\r\n\t\tleft: hat?.left ?? '0',\r\n\t};\r\n}\r\n\r\nexport const RainbowColorId = -99234;\r\nexport function getCosmetic(\r\n\tcolor: number,\r\n\tisAlive: boolean,\r\n\ttype: cosmeticType,\r\n\tid = '',\r\n\tmod: ModsType = 'NONE'\r\n): string {\r\n\tif (type === cosmeticType.base) {\r\n\t\tif (color == RainbowColorId) {\r\n\t\t\treturn isAlive ? rainbowAliveimg : rainbowDeadeimg;\r\n\t\t}\r\n\t\treturn `static:///generated/${isAlive ? `player` : `ghost`}/${color}.png`;\r\n\t} else {\r\n\t\tconst modHat = getModHat(color, id, mod, type === cosmeticType.hat_back);\r\n\t\tif (modHat) return modHat;\r\n\t}\r\n\treturn '';\r\n}\r\n"]}