{"version":3,"file":"ConnectionController.js","sourceRoot":"","sources":["ConnectionController.ts"],"names":[],"mappings":"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","sourcesContent":["// import { EventEmitter as EventEmitterO } from 'events';\r\n// import Peer from 'simple-peer';\r\n// import * as io from 'socket.io-client';\r\n// import { AmongUsState, GameState, Player } from './AmongUsState';\r\n// import { SocketElementMap, SocketElement, Client, AudioElement, SocketClientMap } from './smallInterfaces';\r\n// import { audioController } from './AudioController';\r\n\r\n// const DEFAULT_ICE_CONFIG: RTCConfiguration = {\r\n// \ticeServers: [\r\n// \t\t{\r\n// \t\t\turls: 'stun:stun.l.google.com:19302',\r\n// \t\t},\r\n// \t\t{\r\n// \t\t\turls: 'turn:crewlink.guus.info:3478',\r\n// \t\t\tusername: 'M9DRVaByiujoXeuYAAAG',\r\n// \t\t\tcredential: 'TpHR9HQNZ8taxjb3',\r\n// \t\t}\r\n// \t],\r\n// };\r\n\r\n// export enum ConnectionState {\r\n// \tdisconnected = 0,\r\n// \tconnecting = 1,\r\n// \tconencted = 2,\r\n// }\r\n\r\n// export declare interface IConnectionController {\r\n// \tcurrentGameState: AmongUsState;\r\n// \tconnectionState: ConnectionState;\r\n// }\r\n\r\n// declare interface ConnectionController {\r\n// \ton(event: 'onstream', listener: (e: MediaStream) => void): this;\r\n// \ton(event: 'gamestateChange', listener: (e: AmongUsState) => void): this;\r\n// }\r\n\r\n// class ConnectionController extends EventEmitterO implements IConnectionController {\r\n// \tsocketIOClient: SocketIOClient.Socket;\r\n// \tpublic currentGameState: AmongUsState;\r\n// \tsocketElements: SocketElementMap = new SocketElementMap();\r\n// \tamongusUsername: string;\r\n// \tcurrenGameCode: string;\r\n// \tpublic connectionState = ConnectionState.disconnected;\r\n// \tgamecode: string;\r\n// \tlocalPLayer: Player;\r\n// \tdeviceID: string;\r\n\r\n// \tprivate getSocketElement(socketId: string): SocketElement {\r\n// \t\tif (!this.socketElements.has(socketId)) {\r\n// \t\t\tthis.socketElements.set(socketId, new SocketElement(socketId));\r\n// \t\t}\r\n// \t\treturn this.socketElements.get(socketId);\r\n// \t}\r\n\r\n// \tgetPlayer(clientId: number): Player {\r\n// \t\t// cache clientid & socketid\r\n// \t\treturn this.currentGameState.players.find((o) => o.clientId === clientId);\r\n// \t}\r\n\r\n// \tconnect(voiceserver: string, gamecode: string, username: string, deviceID: string) {\r\n// \t\tthis.connectionState = ConnectionState.connecting;\r\n// \t\tthis.gamecode = gamecode;\r\n// \t\tthis.amongusUsername = username;\r\n// \t\tthis.deviceID = deviceID;\r\n// \t\tthis.initialize(voiceserver);\r\n// \t\tthis.socketIOClient.emit('join', this.gamecode + '_mobile', Number(Date.now()), Number(Date.now()));\r\n// \t}\r\n\r\n// \tdisconnect() {\r\n// \t\tthis.connectionState = ConnectionState.disconnected;\r\n// \t\tthis.gamecode = '';\r\n// \t\tthis.amongusUsername = '';\r\n// \t\tthis.socketIOClient.emit('leave');\r\n// \t\tthis.socketIOClient.disconnect();\r\n// \t\tthis.disconnectSockets();\r\n// \t}\r\n\r\n// \tprivate disconnectElement(element: SocketElement) {\r\n// \t\tconsole.log('disconnectElement!!!');\r\n// \t\tif (!element) {\r\n// \t\t\treturn;\r\n// \t\t}\r\n// \t\tthis.socketElements.delete(element.socketId);\r\n// \t\taudioController.disconnectElement(element);\r\n// \t}\r\n\r\n// \tprivate disconnectSockets() {\r\n// \t\tfor (const element of this.socketElements.values()) {\r\n// \t\t\tthis.disconnectElement(element);\r\n// \t\t}\r\n// \t}\r\n\r\n// \t// move to different controller\r\n// \tprivate async startAudio() {\r\n// \t\tawait audioController.startAudio();\r\n\r\n// \t\tthis.socketIOClient.on('join', async (peerId: string, client: Client) => {\r\n// \t\t\tconsole.log('[client.join]', { peerId, client });\r\n// \t\t\tconst element = this.getSocketElement(peerId);\r\n// \t\t\telement.client = client;\r\n// \t\t\tthis.ensurePeerConnection(element, true);\r\n// \t\t});\r\n// \t}\r\n\r\n// \tprivate ensurePeerConnection(element: SocketElement, initiator: boolean) {\r\n// \t\tif (!element.peer) {\r\n// \t\t\telement.peer = this.createPeerConnection(element.socketId, audioController.stream, initiator);\r\n// \t\t}\r\n// \t}\r\n\r\n// \tprivate createPeerConnection(socketId: string, stream: MediaStream, initiator): Peer {\r\n// \t\tconsole.log('[createPeerConnection], ', { peerId: socketId });\r\n// \t\tconst peer: Peer = new Peer({\r\n// \t\t\tstream,\r\n// \t\t\tinitiator, // @ts-ignore-line\r\n// \t\t\ticeRestartEnabled: false,\r\n// \t\t\tconfig: DEFAULT_ICE_CONFIG,\r\n// \t\t});\r\n\r\n// \t\tpeer.on('stream', (recievedDtream: MediaStream) => {\r\n// \t\t\tthis.emit('onstream', recievedDtream);\r\n// \t\t\tconsole.log('stream recieved', { recievedDtream });\r\n// \t\t\tthis.getSocketElement(socketId).audioElement = audioController.createAudioElement(recievedDtream);\r\n// \t\t\tconsole.log(this.getSocketElement(socketId).audioElement);\r\n// \t\t});\r\n\r\n// \t\tpeer.on('signal', (data) => {\r\n// \t\t\tthis.socketIOClient.emit('signal', {\r\n// \t\t\t\tdata,\r\n// \t\t\t\tto: socketId,\r\n// \t\t\t});\r\n// \t\t});\r\n\r\n// \t\tpeer.on('close', () => {\r\n// \t\t\tconsole.log('PEER ON CLOSE?');\r\n// \t\t\tconst socketElement = this.getSocketElement(socketId);\r\n// \t\t\taudioController.disconnectElement(socketElement);\r\n// \t\t});\r\n\r\n// \t\tpeer.on('error', (err) => {\r\n// \t\t\tconsole.log('PEER ON error? : ', err);\r\n// \t\t});\r\n\r\n// \t\tconsole.log('peerConnections', this.socketElements);\r\n// \t\treturn peer;\r\n// \t}\r\n\r\n// \tprivate onGameStateChange(amongUsState: AmongUsState) {\r\n// \t\tthis.currentGameState = amongUsState;\r\n// \t\tthis.localPLayer = amongUsState.players.filter((o) => o.name === this.amongusUsername)[0];\r\n// \t\tif (!this.localPLayer) {\r\n// \t\t\treturn;\r\n// \t\t}\r\n\r\n// \t\tif (this.connectionState === ConnectionState.connecting || this.currenGameCode !== this.gamecode) {\r\n// \t\t\tthis.currenGameCode = this.gamecode;\r\n// \t\t\tconsole.log(this.localPLayer);\r\n// \t\t\tthis.startAudio().then(() => {\r\n// \t\t\t\tthis.socketIOClient.emit('id', this.localPLayer.id, this.localPLayer.clientId);\r\n// \t\t\t\tthis.socketIOClient.emit('join', this.gamecode, this.localPLayer.id, this.localPLayer.clientId);\r\n// \t\t\t});\r\n// \t\t\tthis.connectionState = ConnectionState.conencted;\r\n// \t\t}\r\n\r\n// \t\tthis.socketElements.forEach((value) => {\r\n// \t\t\tvalue.updatePLayer();\r\n// \t\t\taudioController.updateAudioLocation(this.currentGameState, value, this.localPLayer);\r\n// \t\t});\r\n// \t}\r\n\r\n// \tprivate initialize(serverUrl: string) {\r\n// \t\tthis.socketIOClient?.disconnect();\r\n// \t\tconsole.log('[Connect] got called');\r\n// \t\tthis.socketIOClient = io(serverUrl, {\r\n// \t\t\ttransports: ['websocket'],\r\n// \t\t});\r\n\r\n// \t\tthis.socketIOClient.on('error', (error: string) => {\r\n// \t\t\tconsole.log('[client.error', error);\r\n// \t\t});\r\n// \t\tthis.socketIOClient.on('connect', () => {\r\n// \t\t\tconsole.log('[client.connect]');\r\n// \t\t});\r\n// \t\tthis.socketIOClient.on('disconnect', () => {\r\n// \t\t\tconsole.log('[client.disconnect]');\r\n// \t\t});\r\n\r\n// \t\tthis.socketIOClient.on('setClient', (socketId: string, client: Client) => {\r\n// \t\t\tconsole.log('[client.setClient]', { socketId, client });\r\n// \t\t\tthis.getSocketElement(socketId).client = client;\r\n// \t\t});\r\n\r\n// \t\tthis.socketIOClient.on('setClients', (clients: SocketClientMap) => {\r\n// \t\t\tconsole.log('[client.setClients]', { clients });\r\n// \t\t\tfor (const socketId of Object.keys(clients)) {\r\n// \t\t\t\tthis.getSocketElement(socketId).client = clients[socketId];\r\n// \t\t\t}\r\n// \t\t});\r\n\r\n// \t\tthis.socketIOClient.on('signal', ({ data, from }: { data: any; from: string }) => {\r\n// \t\t\tif (data.hasOwnProperty('gameState')) {\r\n// \t\t\t\t//\tconsole.log('gamestateupdate?');\r\n// \t\t\t\tthis.onGameStateChange(data as AmongUsState);\r\n// \t\t\t\treturn;\r\n// \t\t\t}\r\n\r\n// \t\t\tif (!audioController.stream) {\r\n// \t\t\t\treturn;\r\n// \t\t\t}\r\n// \t\t\tconst socketElement = this.getSocketElement(from);\r\n// \t\t\tthis.ensurePeerConnection(socketElement, false);\r\n// \t\t\tsocketElement.peer.signal(data);\r\n// \t\t});\r\n// \t}\r\n// }\r\n\r\n// export const connectionController = new ConnectionController();\r\n"]}