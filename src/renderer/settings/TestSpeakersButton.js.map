{"version":3,"file":"TestSpeakersButton.js","sourceRoot":"","sources":["TestSpeakersButton.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AACnD,aAAa;AACb,OAAO,KAAK,MAAM,kCAAkC,CAAC;AAErD,OAAO,MAAM,MAAM,0BAA0B,CAAC;AAC9C,OAAO,UAAU,MAAM,qCAAqC,CAAC;AAO7D,MAAM,SAAS,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC;IACnC,MAAM,EAAE;QACP,KAAK,EAAE,aAAa;QACpB,MAAM,EAAE,UAAU;KAClB;CACD,CAAC,CAAC,CAAC;AAEJ,MAAM,KAAK,GAAG,IAAI,KAAK,EAA0B,CAAC;AAClD,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC;AAElB,MAAM,kBAAkB,GAAgC,CAAC,EAAE,CAAC,EAAE,OAAO,EAAqB,EAAE,EAAE;IAC7F,MAAM,OAAO,GAAG,SAAS,EAAE,CAAC;IAC5B,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAE9C,SAAS,CAAC,GAAG,EAAE;QACd,IAAI,OAAO,CAAC,WAAW,EAAE,KAAK,SAAS;YAAE,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAClE,KAAK,CAAC,OAAO,GAAG,GAAG,EAAE;YACpB,UAAU,CAAC,KAAK,CAAC,CAAC;QACnB,CAAC,CAAC;IACH,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAEd,MAAM,YAAY,GAAG,GAAG,EAAE;QACzB,IAAI,OAAO,EAAE;YACZ,KAAK,CAAC,KAAK,EAAE,CAAC;YACd,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC;YACtB,UAAU,CAAC,KAAK,CAAC,CAAC;SAClB;aAAM;YACN,KAAK,CAAC,IAAI,EAAE,CAAC;YACb,UAAU,CAAC,IAAI,CAAC,CAAC;SACjB;IACF,CAAC,CAAC;IAEF,OAAO,CACN,oBAAC,MAAM,IAAC,OAAO,EAAC,WAAW,EAAC,KAAK,EAAC,WAAW,EAAC,IAAI,EAAC,OAAO,EAAC,SAAS,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,EAAE,YAAY,IACzG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,kCAAkC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,mCAAmC,CAAC,CACjF,CACT,CAAC;AACH,CAAC,CAAC;AAEF,eAAe,kBAAkB,CAAC","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// @ts-ignore\r\nimport chime from '../../../static/sounds/chime.mp3';\r\nimport { ExtendedAudioElement } from '../Voice';\r\nimport Button from '@material-ui/core/Button';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\n\r\ninterface TestSpeakersProps {\r\n\tt: (key: string) => string;\r\n\tspeaker: string;\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n\tbutton: {\r\n\t\twidth: 'fit-content',\r\n\t\tmargin: '5px auto',\r\n\t},\r\n}));\r\n\r\nconst audio = new Audio() as ExtendedAudioElement;\r\naudio.src = chime;\r\n\r\nconst TestSpeakersButton: React.FC<TestSpeakersProps> = ({ t, speaker }: TestSpeakersProps) => {\r\n\tconst classes = useStyles();\r\n\tconst [playing, setPlaying] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (speaker.toLowerCase() !== 'default') audio.setSinkId(speaker);\r\n\t\taudio.onended = () => {\r\n\t\t\tsetPlaying(false);\r\n\t\t};\r\n\t}, [speaker]);\r\n\r\n\tconst testSpeakers = () => {\r\n\t\tif (playing) {\r\n\t\t\taudio.pause();\r\n\t\t\taudio.currentTime = 0;\r\n\t\t\tsetPlaying(false);\r\n\t\t} else {\r\n\t\t\taudio.play();\r\n\t\t\tsetPlaying(true);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Button variant=\"contained\" color=\"secondary\" size=\"small\" className={classes.button} onClick={testSpeakers}>\r\n\t\t\t{playing ? t('settings.audio.test_speaker_stop') : t('settings.audio.test_speaker_start')}\r\n\t\t</Button>\r\n\t);\r\n};\r\n\r\nexport default TestSpeakersButton;\r\n"]}