{"version":3,"file":"MicrophoneSoundBar.js","sourceRoot":"","sources":["MicrophoneSoundBar.tsx"],"names":[],"mappings":"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","sourcesContent":["import LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport React, { useEffect, useState } from 'react';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\n\r\ninterface TestMicProps {\r\n\tmicrophone: string;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot: {\r\n\t\tdisplay: 'flex',\r\n\t\twidth: '100%',\r\n\t\tmarginBottom: theme.spacing(2),\r\n\t},\r\n\tbar: {\r\n\t\theight: 8,\r\n\t\tmargin: '5px auto',\r\n\t\twidth: 200,\r\n\t},\r\n\tinner: {\r\n\t\ttransition: 'transform .05s linear',\r\n\t},\r\n}));\r\n\r\nconst TestMicrophoneButton: React.FC<TestMicProps> = function ({ microphone }: TestMicProps) {\r\n\tconst classes = useStyles();\r\n\tconst [error, setError] = useState<boolean>(false);\r\n\tconst [rms, setRms] = useState<number>(0);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetError(false);\r\n\r\n\t\tconst ctx = new AudioContext();\r\n\t\tconst processor = ctx.createScriptProcessor(2048, 1, 1);\r\n\t\tprocessor.connect(ctx.destination);\r\n\r\n\t\tconst minUpdateRate = 50;\r\n\t\tlet lastRefreshTime = 0;\r\n\r\n\t\tconst handleProcess = (event: AudioProcessingEvent) => {\r\n\t\t\t// limit update frequency\r\n\t\t\tif (event.timeStamp - lastRefreshTime < minUpdateRate) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// update last refresh time\r\n\t\t\tlastRefreshTime = event.timeStamp;\r\n\r\n\t\t\tconst input = event.inputBuffer.getChannelData(0);\r\n\t\t\tconst total = input.reduce((acc, val) => acc + Math.abs(val), 0);\r\n\t\t\tconst rms = Math.min(0.5, Math.sqrt(total / input.length));\r\n\t\t\tsetRms(rms);\r\n\t\t};\r\n\r\n\t\t// @ts-ignore-line\r\n\t\tconst audio_options: any = {\r\n\t\t\tdeviceId: microphone ?? 'default',\r\n\t\t\tautoGainControl: false,\r\n\t\t\techoCancellation: false,\r\n\t\t\tnoiseSuppression: false,\r\n\t\t\tgoogEchoCancellation: false,\r\n\t\t\tgoogAutoGainControl2: false,\r\n\t\t\tgoogNoiseSuppression: false,\r\n\t\t\tgoogHighpassFilter: false,\r\n\t\t\tgoogTypingNoiseDetection: false,\r\n\t\t};\r\n\r\n\t\tnavigator.mediaDevices\r\n\t\t\t.getUserMedia({\r\n\t\t\t\taudio: audio_options,\r\n\t\t\t\tvideo: false,\r\n\t\t\t})\r\n\t\t\t.then((stream) => {\r\n\t\t\t\tconst src = ctx.createMediaStreamSource(stream);\r\n\t\t\t\tsrc.connect(processor);\r\n\t\t\t\tprocessor.addEventListener('audioprocess', handleProcess);\r\n\t\t\t})\r\n\t\t\t.catch(() => setError(true));\r\n\r\n\t\treturn () => {\r\n\t\t\tprocessor.removeEventListener('audioprocess', handleProcess);\r\n\t\t};\r\n\t}, [microphone]);\r\n\r\n\tif (error) {\r\n\t\treturn <Typography color=\"error\">Could not connect to microphone</Typography>;\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<div className={classes.root}>\r\n\t\t\t\t<LinearProgress\r\n\t\t\t\t\tclasses={{\r\n\t\t\t\t\t\troot: classes.bar,\r\n\t\t\t\t\t\tbar: classes.inner,\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\t\tvariant=\"determinate\"\r\n\t\t\t\t\tvalue={rms * 2 * 100}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default TestMicrophoneButton;\r\n"]}